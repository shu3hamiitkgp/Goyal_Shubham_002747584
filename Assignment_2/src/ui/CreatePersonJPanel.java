/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.City;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Gender;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author shubhamgoyal
 */
public class CreatePersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePersonJPanel
     */
    private JPanel displayJPanel;
    private model.AppSystem system;
    private PersonDirectory perDir;
    private PatientDirectory patDir;
    private DoctorDirectory docDir;
//    private DoctorDirectory docDir;
    private Person person;
    private Patient patient;
    private Doctor doctor;
    
    public CreatePersonJPanel(JPanel displayJPanel, model.AppSystem system) {
        initComponents();
        this.displayJPanel = displayJPanel;
        this.system = system;
        this.perDir= system.getPersonDirectory();
        this.patDir=system.getPatientDirectory();
        this.docDir=system.getDoctorDirectory();
        displayStaticData();

//        this.custDir= admin.getCustDir();
        
    }
    
    private void displayStaticData() {
        
        String[] genders = Gender.getGenderArray();
        for(String gender:genders){
            ComboBoxGender.addItem(gender);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        txtUserID = new javax.swing.JTextField();
        txtPword = new javax.swing.JTextField();
        txtRePword = new javax.swing.JTextField();
        lblUserID = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblRePassword = new javax.swing.JLabel();
        ComboBoxRole = new javax.swing.JComboBox<>();
        lblRole = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        ComboBoxGender = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("New User Registration");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        txtUserID.setToolTipText("User ID should be in format xx@xx.xx");

        txtPword.setToolTipText("Basic Requirement - Atleast 6 digits, one of each upper case letter, lower case letter, digit and special character ($, *, # or &)");

        txtRePword.setToolTipText("Should match password above");

        lblUserID.setText("UserID:");

        lblPassword.setText("Password:");

        lblRePassword.setText("Re-enter Password :");

        ComboBoxRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Community Admin", "Hospital Admin", "Patient", "Doctor" }));

        lblRole.setText("Role :");

        txtAge.setToolTipText("only numericals");

        lblGender.setText("Gender:");

        lblAge.setText("Age:");

        lblName.setText("Name:");

        txtName.setToolTipText("Only Alphabets");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(88, 88, 88)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblRePassword)
                                            .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblUserID, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addComponent(lblRole))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtUserID)
                                        .addComponent(txtPword)
                                        .addComponent(txtRePword)
                                        .addComponent(ComboBoxRole, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(73, 73, 73)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblGender)
                                                .addComponent(lblAge)))
                                        .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAge)
                                        .addComponent(txtName)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ComboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE))))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGender, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ComboBoxGender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUserID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRePassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRole))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnBack))
                .addGap(56, 56, 56))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        String role = ComboBoxRole.getSelectedItem().toString();
        
        if(!isNameValid()){
            JOptionPane.showMessageDialog(null, "Name should be only alphabet and not null");
        }
        else if(!isAgeValid()){
            JOptionPane.showMessageDialog(null, "Age should be only numerical value and not null");
        }
        else if(!userIDValidator()){
            JOptionPane.showMessageDialog(null, "Error: Either user id exits or it is not in format xx@xx.xx");
//            txtUserID.setBorder(BorderFactory.createEtchedBorder(Color.RED,RED));
//            lblUserID.setForeground(RED);
        } else if(!passwordValidator()){
            JOptionPane.showMessageDialog(null, "Password should be at least 6 digits and contain at least one upper case letter, one lower case letter, one digit and one special character $, *, # or &.");
//            txtPword.setBorder(BorderFactory.createEtchedBorder(Color.RED,RED));
//            createPassword.setForeground(RED);
        } else if (!txtPword.getText().equals(txtRePword.getText())){
            JOptionPane.showMessageDialog(null, "Password is not matched");
//            lblRePassword.setForeground(RED);
        }else if(userIDValidator() && passwordValidator()){
            if(role.equalsIgnoreCase("Community Admin")){
                
                Person person = new Person(txtName.getText(),Double.valueOf(txtAge.getText()),Gender.valueOf((String)ComboBoxGender.getSelectedItem()),
                        txtUserID.getText(),txtPword.getText(),role,
                        new Date());
            
                perDir.getPersons().add(person);
                
                JOptionPane.showMessageDialog(this, "Successfully added Community Admin");
                resetUi();

            }else if(role.equalsIgnoreCase("Hospital Admin")){
                
                Person person = new Person(txtName.getText(),Double.valueOf(txtAge.getText()),Gender.valueOf((String)ComboBoxGender.getSelectedItem()),
                        txtUserID.getText(),txtPword.getText(),role,
                        new Date());
            
                perDir.getPersons().add(person);
                
                JOptionPane.showMessageDialog(this, "Successfully added Hospital Admin");
                resetUi();
                
            }else if(role.equalsIgnoreCase("Patient")){
                
//                Person person = new Person(txtName.getText(),Double.valueOf(txtAge.getText()),Gender.valueOf((String)ComboBoxGender.getSelectedItem()),
//                        txtUserID.getText(),txtPword.getText(),role,
//                        new Date());
            
                Patient patient =  new Patient(txtName.getText(),Double.valueOf(txtAge.getText()),Gender.valueOf((String)ComboBoxGender.getSelectedItem()),
                        txtUserID.getText(),txtPword.getText(),new Date(), null,null,null,null);
                
                this.person=(Person) patient;
                patDir.getPatients().add(patient);
//                perDir.getPersons().add(this.person);
                
                JOptionPane.showMessageDialog(this, "Successfully added Patient");
                resetUi();
                
            }else if(role.equalsIgnoreCase("Doctor")){
                
//                Person person = new Person(txtName.getText(),Double.valueOf(txtAge.getText()),Gender.valueOf((String)ComboBoxGender.getSelectedItem()),
//                        txtUserID.getText(),txtPword.getText(),role,
//                        new Date());
            
                Doctor doctor =  new Doctor(txtName.getText(),Double.valueOf(txtAge.getText()),Gender.valueOf((String)ComboBoxGender.getSelectedItem()),
                        txtUserID.getText(),txtPword.getText(),new Date(),null,null,null);
                
                this.person=(Person) doctor;
                docDir.getDoctors().add(doctor);
//                perDir.getPersons().add(this.person);
                
                JOptionPane.showMessageDialog(this, "Successfully added Doctor");
                resetUi();
                
            }
            
            else{
                System.out.println("Please Enter User Name and Password to create user");
            }
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        displayJPanel.remove(this);
        Component[] componentArray = displayJPanel.getComponents();
        ViewPersonsJPanel viewPersonJPanel = (ViewPersonsJPanel) componentArray[componentArray.length-1];
        viewPersonJPanel.populateTable();
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.previous(displayJPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    public boolean isNameValid() {
        
        if(txtName.getText().isBlank()) {
            return false;
        }
        return txtName.getText().matches("^[a-zA-Z\\s]*$");
    }
    
    public boolean isAgeValid() {
        
        String Age = txtAge.getText();
        Age = Age.replace(" ", "");
        
        try {
            Integer.valueOf(Age);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    private boolean passwordValidator() {
     
        Pattern g = Pattern.compile("^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[$#&])[A-Za-z\\d$#&]{6,}$");
        Matcher m = g.matcher(txtPword.getText());
        boolean b = m.matches();
        return b;
    }

    private boolean userIDValidator() {
        Pattern p = Pattern.compile("^[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-z0-9]+$");
        Matcher m = p.matcher(txtUserID.getText());
        boolean b = m.matches();
        
        if(b==true){
            try {
            
            if(perDir.searchUserIDProfile(txtUserID.getText()) != null){
                throw new Exception("Already Exists");
            }
            return true;
        } catch (Exception e) {
            return false;
        }
        }else{
            return false;
        }
        
        
    }
    
    private void resetUi() {
        
        txtName.setText("");
        txtAge.setText("");
        ComboBoxGender.setSelectedItem(Gender.Male.name());
        txtUserID.setText("");
        txtPword.setText("");
        txtRePword.setText("");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxGender;
    private javax.swing.JComboBox<String> ComboBoxRole;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRePassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPword;
    private javax.swing.JTextField txtRePword;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables
}
