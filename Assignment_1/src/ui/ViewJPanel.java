/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.EmployeeProfile;
import model.EmployeeProfileHistory;
import ui.CreateJPanel;

/**
 *
 * @author shubhamgoyal
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    
    EmployeeProfileHistory history;
    
    
    public ViewJPanel(EmployeeProfileHistory history) {
        initComponents();
         
        this.history = history;
        
        populateTable();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbtnGroup = new javax.swing.ButtonGroup();
        rbtnGroupSearch = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployeeProfile = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblEmailAddress = new javax.swing.JLabel();
        lblPhotoPath = new javax.swing.JLabel();
        txtEmailAddress = new javax.swing.JTextField();
        txtCellPhoneNumber = new javax.swing.JTextField();
        txtEmployeeID = new javax.swing.JTextField();
        txtPositionTitle = new javax.swing.JTextField();
        txtTeamInfo = new javax.swing.JTextField();
        txtStartDate = new javax.swing.JTextField();
        txtLevel = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtPhotoPath = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblEmployeeID = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        lblTeamInfo = new javax.swing.JLabel();
        lblPositionTitle = new javax.swing.JLabel();
        lblCellPhoneNumber = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        rbtnMale = new javax.swing.JRadioButton();
        rbtnFemale = new javax.swing.JRadioButton();
        rbtnOther = new javax.swing.JRadioButton();
        btnSearch = new javax.swing.JButton();
        txtSearchBox = new javax.swing.JTextField();
        rbtnName = new javax.swing.JRadioButton();
        rbtnEmployeeID = new javax.swing.JRadioButton();
        btnReset = new javax.swing.JButton();

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View Employee Details");

        tblEmployeeProfile.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Employee ID", "Team Info", "Position Title", "Email Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployeeProfile);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblEmailAddress.setText("Email:");

        lblPhotoPath.setText("Photo:");

        txtEmailAddress.setToolTipText("Standard xyz@mail.com format");

        txtCellPhoneNumber.setToolTipText("Enter 10-digit numbers only");

        txtEmployeeID.setToolTipText("Only numbers accepted");

        txtPositionTitle.setToolTipText("Only Alphabets and Spaces");

        txtTeamInfo.setToolTipText("Only Alphabets and Spaces");

        txtStartDate.setToolTipText("dd/MM/yyyy Format Only");

        txtLevel.setToolTipText("Only numbers accepted");

        txtAge.setToolTipText("Only numbers accepted");

        txtPhotoPath.setToolTipText("Upload picture");

        txtName.setToolTipText("Only Alphabets and Spaces");

        lblName.setText("Name:");

        lblEmployeeID.setText("Employee ID:");

        lblAge.setText("Age:");

        lblGender.setText("Gender:");

        lblStartDate.setText("Start Date:");

        lblLevel.setText("Level:");

        lblTeamInfo.setText("Team Info:");

        lblPositionTitle.setText("Position Title:");

        lblCellPhoneNumber.setText("Cell Phone:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblPhoto.setVerifyInputWhenFocusTarget(false);

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        rbtnGroup.add(rbtnMale);
        rbtnMale.setText("M");

        rbtnGroup.add(rbtnFemale);
        rbtnFemale.setText("F");

        rbtnGroup.add(rbtnOther);
        rbtnOther.setText("Other");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtSearchBox.setToolTipText("Only alphabets for Name and numbers for EmployeeID");

        rbtnGroupSearch.add(rbtnName);
        rbtnName.setText("Name");

        rbtnGroupSearch.add(rbtnEmployeeID);
        rbtnEmployeeID.setText("Employee ID");

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addComponent(lblPhotoPath))
                                .addComponent(lblEmailAddress, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(lblCellPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAge, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblGender, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbtnMale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtnFemale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtnOther))
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCellPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmailAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhotoPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEmployeeID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblTeamInfo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblPositionTitle)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblLevel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblStartDate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(lblPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpload)
                                .addGap(300, 300, 300))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtSearchBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset)
                        .addGap(24, 24, 24))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addGap(76, 76, 76))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnSearch, btnView});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtnName)
                    .addComponent(rbtnEmployeeID)
                    .addComponent(btnReset))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblName)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblEmployeeID)
                                .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(50, 50, 50)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblAge)
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTeamInfo)
                                .addComponent(txtTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(50, 50, 50)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblEmailAddress)
                                .addComponent(txtEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPositionTitle)
                            .addComponent(txtPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnMale)
                            .addComponent(rbtnFemale)
                            .addComponent(rbtnOther)
                            .addComponent(lblGender))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStartDate)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCellPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCellPhoneNumber))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLevel)
                            .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhotoPath)
                    .addComponent(txtPhotoPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(44, 44, 44))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblEmployeeProfile.getSelectedRow();
        
        if(selectedRowIndex<0){
            
            JOptionPane.showMessageDialog(this,"Please select a row to delete.");
            return;
        }
        
        DefaultTableModel model=(DefaultTableModel) tblEmployeeProfile.getModel();
        EmployeeProfile selectedProfile = (EmployeeProfile) model.getValueAt(selectedRowIndex,0);
        
        history.deleteProfile(selectedProfile);
        
        JOptionPane.showMessageDialog(this,"Employee Profile deleted.");
        
        populateTable();
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblEmployeeProfile.getSelectedRow();
        
        if(selectedRowIndex<0){
            
            JOptionPane.showMessageDialog(this,"Please select a row to delete.");
            return;
        }
        
        DefaultTableModel model=(DefaultTableModel) tblEmployeeProfile.getModel();
        EmployeeProfile selectedProfile = (EmployeeProfile) model.getValueAt(selectedRowIndex,0);
        
        txtName.setText(selectedProfile.getName());
        txtEmployeeID.setText(String.valueOf(selectedProfile.getEmployeeID()));
        txtTeamInfo.setText(selectedProfile.getTeamInfo());
        txtPositionTitle.setText(selectedProfile.getPositionTitle());
        txtCellPhoneNumber.setText(String.valueOf(selectedProfile.getCellPhoneNumber()));
        txtEmailAddress.setText(selectedProfile.getEmailAddress());
        txtPhotoPath.setText(selectedProfile.getPhotoPath());
        txtLevel.setText(String.valueOf( selectedProfile.getLevel()));
        txtAge.setText(String.valueOf(selectedProfile.getAge()));
        txtStartDate.setText(selectedProfile.getStartDate()==null?"":new SimpleDateFormat("dd/MM/yyyy").format(selectedProfile.getStartDate()));
                
        if(selectedProfile.getGender().equals("M")){
            rbtnMale.setSelected(true);
        }else if(selectedProfile.getGender().equals("F")){
            rbtnFemale.setSelected(true);
        }else if(selectedProfile.getGender().equals("Other")){
            rbtnOther.setSelected(true);
        }
        
        setPhoto();
        
    }//GEN-LAST:event_btnViewActionPerformed

    public void setValuesToHistory(){
        
        int selectedRowIndex = tblEmployeeProfile.getSelectedRow();
        
        if(selectedRowIndex<0){
            
            JOptionPane.showMessageDialog(this,"Please select a row to delete.");
            return;
        }
        
        DefaultTableModel model=(DefaultTableModel) tblEmployeeProfile.getModel();
        EmployeeProfile selectedProfile = (EmployeeProfile) model.getValueAt(selectedRowIndex,0);
            
        
        selectedProfile.setName(txtName.getText());
        selectedProfile.setAge(Integer.parseInt(txtAge.getText()));
        selectedProfile.setEmployeeID(Long.valueOf(txtEmployeeID.getText()));
//        ep.setGender(txtGender.getText());
        selectedProfile.setStartDate(getDateFromString(txtStartDate.getText()));
        selectedProfile.setLevel(Integer.parseInt(txtLevel.getText()));
        selectedProfile.setTeamInfo(txtTeamInfo.getText());
        selectedProfile.setPositionTitle(txtPositionTitle.getText());
        selectedProfile.setCellPhoneNumber(Long.valueOf(txtCellPhoneNumber.getText()));
        selectedProfile.setEmailAddress(txtEmailAddress.getText());
        selectedProfile.setPhotoPath(txtPhotoPath.getText());
        
        if(rbtnMale.isSelected()){
            selectedProfile.setGender(rbtnMale.getText());
        }else if(rbtnFemale.isSelected()){
            selectedProfile.setGender(rbtnFemale.getText());
        }else if(rbtnOther.isSelected()){
            selectedProfile.setGender(rbtnOther.getText());
        }
        
    }
    
    public Date getDateFromString(String StartDate) {
        
        Date date = null;
        try {
           date = new SimpleDateFormat("dd/MM/yyyy").parse(StartDate);
        }catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Not able to Parse date String");
        }
        return date;
    }
    
    public boolean isDataValid(){
        
        System.out.println("Name Validation : " + isNameValid());
        System.out.println("Age Validation : " + isAgeValid());
        System.out.println("EmployeeID Validation : " + isEmployeeIDValid());
//        System.out.println("Gender Validation : " + isGenderValid());
        System.out.println("StartDate Validation : " + isStartDateValid());
        System.out.println("Level Validation : " + isLevelValid());
        System.out.println("TeamInfo Validation : " + isTeamInfoValid());
        System.out.println("PositionTitle Validation : " + isPositionTitleValid());
        System.out.println("CellPhoneNumber Validation : " + isCellPhoneNumberValid());
        System.out.println("Email Validation : " + isEmailValid());
        System.out.println("PhotoPath Validation : " + isPhotoPathValid());
        
        if(isNameValid() && isAgeValid() && isEmployeeIDValid() && 
                isStartDateValid() && isLevelValid() && isTeamInfoValid() && isPositionTitleValid() &&
                isCellPhoneNumberValid() && isEmailValid() && isPhotoPathValid()) {
            
            return true;
        }
        return false;
        
    }
    
    public boolean isNameValid() {
        
        if(txtName.getText().isBlank()) {
            return false;
        }
        return txtName.getText().matches("^[a-zA-Z\\s]*$");
    }

    public boolean isAgeValid() {
        
        String Age = txtAge.getText();
        Age = Age.replace(" ", "");
        
        try {
            Integer.valueOf(Age);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean isEmployeeIDValid() {
        
        String EmployeeID = txtEmployeeID.getText();
        EmployeeID = EmployeeID.replace(" ", "");
        
        try {
            Long.valueOf(EmployeeID);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean isLevelValid() {
        
        String Level = txtLevel.getText();
        Level = Level.replace(" ", "");
        
        try {
            Integer.valueOf(Level);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean isStartDateValid() {
        
        if(txtStartDate.getText().isBlank()){
            return false;
        }
        
        Date date = null;
        try {
           SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyy");
           format.setLenient(false);
           date = format.parse(txtStartDate.getText().replace(" ", ""));
           System.err.println(date);
           if(date.after(new Date())){
               return false;
           }
           
        }catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }

    public boolean isTeamInfoValid() {
        
        if(txtTeamInfo.getText().isBlank()) {
            return false;
        }
        return txtTeamInfo.getText().matches("^[a-zA-Z\\s]*$");

    }

    public boolean isPositionTitleValid() {
        
        
        if(txtPositionTitle.getText().isBlank()) {
            return false;
        }
        return txtPositionTitle.getText().matches("^[a-zA-Z\\s]*$");
    }

    public boolean isCellPhoneNumberValid() {
        
        String CellPhoneNumber = txtCellPhoneNumber.getText();
        CellPhoneNumber = CellPhoneNumber.replace(" ", "");
        if(CellPhoneNumber.length()!=10){
            return false;
        }
        try {
            Long.valueOf(CellPhoneNumber);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean isEmailValid() {
        
        if(txtEmailAddress.getText().isBlank()){
            return false;
        }
        String emailRegex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        return txtEmailAddress.getText().matches(emailRegex);
    }
    
    public boolean isPhotoPathValid() {
        
        File file = new File(txtPhotoPath.getText());
        if(file.exists()){
            return true;
        }
        return false;
    }
    
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        if(isDataValid()){
            setValuesToHistory();
            JOptionPane.showMessageDialog(this, "Employee Profile Updated Successfully");
        }else{
            JOptionPane.showMessageDialog(this, "Error Updating Employee Profile");
        }  
        
        txtName.setText("");
        txtEmployeeID.setText("");
        txtAge.setText("");
//        txtGender.setText("");
        txtStartDate.setText("");
        txtLevel.setText("");
        txtTeamInfo.setText("");
        txtPositionTitle.setText("");
        txtCellPhoneNumber.setText("");
        txtEmailAddress.setText("");
        txtPhotoPath.setText("");
        lblPhoto.setIcon(null);
        rbtnGroup.clearSelection();
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    
    private void setPhoto(){
        
        ImageIcon photo = new ImageIcon(txtPhotoPath.getText());
        Image photoResized = photo.getImage().getScaledInstance(lblPhoto.getWidth(), lblPhoto.getHeight(),4);
        lblPhoto.setIcon(new ImageIcon(photoResized));
    }
    
    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("/"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtPhotoPath.setText(selectedFile.getAbsolutePath());
            setPhoto();
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        if(rbtnName.isSelected()){
            EmployeeProfile result = history.searchNameProfile(txtSearchBox.getText());
            if(result== null){
                JOptionPane.showMessageDialog(null,"Name you entered doesn't exist","Information",JOptionPane.INFORMATION_MESSAGE);  
            }
            else{
                DefaultTableModel dtm=(DefaultTableModel) tblEmployeeProfile.getModel();
                TableRowSorter<DefaultTableModel>tr=new TableRowSorter<>(dtm);
                tblEmployeeProfile.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter("(?i)"+ txtSearchBox.getText().trim()));
            }
        }else if(rbtnEmployeeID.isSelected()){
            EmployeeProfile result = history.searchEmployeeIDProfile(txtSearchBox.getText());
            if(result== null){
                JOptionPane.showMessageDialog(null,"EmployeeID you entered doesn't exist","Information",JOptionPane.INFORMATION_MESSAGE);  
            }
            else{
                DefaultTableModel dtm=(DefaultTableModel) tblEmployeeProfile.getModel();
                TableRowSorter<DefaultTableModel>tr=new TableRowSorter<>(dtm);
                tblEmployeeProfile.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter(txtSearchBox.getText().trim()));
            }
            
        }
                
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        txtSearchBox.setText("");
        rbtnGroupSearch.clearSelection();
        //EmployeeProfile result=history.searchName(txtSearchBox.getText());
        DefaultTableModel dtm=(DefaultTableModel) tblEmployeeProfile.getModel();
        TableRowSorter<DefaultTableModel>tr=new TableRowSorter<>(dtm);
        tblEmployeeProfile.setRowSorter(tr);
        tr.setRowFilter(
  RowFilter.regexFilter(txtSearchBox.getText().trim()));

    }//GEN-LAST:event_btnResetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpload;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCellPhoneNumber;
    private javax.swing.JLabel lblEmailAddress;
    private javax.swing.JLabel lblEmployeeID;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblPhotoPath;
    private javax.swing.JLabel lblPositionTitle;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblTeamInfo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rbtnEmployeeID;
    private javax.swing.JRadioButton rbtnFemale;
    private javax.swing.ButtonGroup rbtnGroup;
    private javax.swing.ButtonGroup rbtnGroupSearch;
    private javax.swing.JRadioButton rbtnMale;
    private javax.swing.JRadioButton rbtnName;
    private javax.swing.JRadioButton rbtnOther;
    private javax.swing.JTable tblEmployeeProfile;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCellPhoneNumber;
    private javax.swing.JTextField txtEmailAddress;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JTextField txtLevel;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhotoPath;
    private javax.swing.JTextField txtPositionTitle;
    private javax.swing.JTextField txtSearchBox;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtTeamInfo;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
        DefaultTableModel model=(DefaultTableModel) tblEmployeeProfile.getModel();
        model.setRowCount(0);
        
        for (EmployeeProfile ep: history.getHistory()){
            
            Object[] row= new Object[5];
            row[0]=ep;
            row[1]=ep.getEmployeeID();
            row[2]=ep.getTeamInfo();
            row[3]=ep.getPositionTitle();
            row[4]=ep.getEmailAddress();
            
            model.addRow(row);
            
        }
        
    }

}
